# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = "nixos"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.
  networking.extraHosts = ''
    127.0.0.1 pinalove.com
    127.0.0.1 www.pinalove.com
    127.0.0.1 m.pinalove.com
    127.0.0.1 mobile.pinalove.com
  '';

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Enable networking
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = "America/Bahia_Banderas";

  # Enable network time synchronization.
  services.timesyncd.enable = false;

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";

  # Enable the X11 windowing system.
  services.xserver.enable = true;

  # Enable the GNOME Desktop Environment.
  services.displayManager.gdm.enable = true;
  services.desktopManager.gnome.enable = true;
  
  # Cloudflare WARP
  services.cloudflare-warp.enable = true;

  # Configure keymap in X11
  services.xserver.xkb = {
    layout = "us";
    variant = "";
  };
  nix.settings.experimental-features = [ "nix-command" "flakes" ];
  # Enable CUPS to print documents.
  services.printing.enable = true;

  # Enable sound with pipewire.
  services.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };

  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;
  

    users.users.lessuseless = {
      isNormalUser = true;
      description = "Ashley Barr";
      extraGroups = [ "networkmanager" "wheel" "docker" ]; # 'docker' group is for rootless
     
      # This is required for rootless containers (Distrobox, rootless Docker)
      subGidRanges = [ { count = 65536; startGid = 100000; } ];
      subUidRanges = [ { count = 65536; startUid = 100000; } ];
      packages = with pkgs; [
      #  thunderbird
      ];
   };

  # Enable automatic login for the user.
  
  # Workaround for GNOME autologin: https://github.com/NixOS/nixpkgs/issues/103746#issuecomment-945091229
  systemd.services."getty@tty1".enable = false;
  systemd.services."autovt@tty1".enable = false;

  # Install firefox.
  programs.firefox.enable = true;
  
  programs.bazecor.enable = true;

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;
  
  # Rootless docker
#  virtualisation.docker.rootless = 
#  enable = true;
#  setSocketVariable = true; 
#  daemon.settings = {
#    experimental = true;
#    default-address-pools = [
#      {
#        base = "10.10.0.0/16"; # This base encompasses 10.10.0.0 to 10.10.255.255
#        size = 24;            # Docker will create /24 networks (e.g., 10.10.0.0/24, 10.10.1.0/24, etc.)
#        }
#      ];
#    };
#  };
  
  # Rootful docker
#  virtualisation.docker = {
#    enable = true;
#    daemon.settings = {
#      experimental = true;
#      default-address-pools = [
#        {
#          base = "10.10.0.0/16"; # Keep consistent with rootless or choose another non-overlapping base
#          size = 24;
#        }
#      ];
#    };
#  };
  
  
  # Enable common container config files in /etc/containers
#  virtualisation.containers.enable = true;
#  virtualisation = {
#    podman = {
#      enable = true;
#      # Create a `docker` alias for podman, to use it as a drop-in replacement
#      dockerCompat = true;
#      # Required for containers under podman-compose to be able to talk to each other.
#      defaultNetwork.settings.dns_enabled = true;
#      };
#    };

  programs.direnv = {
    enable = true;
    nix-direnv.enable = true;
  };

  programs.appimage = {
    enable = true;
    binfmt = true;
  };  
  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    # Core utilities that are useful for all users or for system maintenance
    nix-direnv
    vim
    wget
    curl
    git
    distrobox # The core distrobox package is a system dependency
    code-cursor # This appears to be a system-level component for VS Code
  ]; 
  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "25.05"; # Did you read the comment?

  fonts = {
    packages = with pkgs; [
      font-awesome
      roboto
      source-sans-pro
      source-sans
    ];
  };
}
